'''
根据Dog 类创建的每个实例都将存储名字和年龄。
我们赋予了每条小狗蹲下（sit() ） 和打滚（roll_over() ） 的能力：

'''
class Dog():  #①处
    '''一次模拟小狗的简单尝试''' #②处
    def __init__(self,name,age):   #③处
        '''初始化属性name和age'''
        self.name = name   #④处
        self.age = age
    
    def sit(self):  #⑤处
        '''模拟小狗被命令时蹲下'''
        print(self.name.titel()+" is now sitting")
        
    def roll_over(self):
        '''模拟小狗被命令时打滚'''
        print(self.name.titel()+" rolled over!")

'''
这里需要注意的地方很多， 但你也不用担心， 本章充斥着这样的结构， 你有大把的机会熟悉它。
在❶处， 我们定义了一个名为Dog 的类。 根据约定， 在Python中， 首字母大写的名称指的是类。
这个类定义中的括号是空的， 因为我们要从空白创建这个类。
在❷处， 我们编写了一个文档字符串， 对这个类的功能作了描述。
1. 方法__init__()
类中的函数称为方法 ； 你前面学到的有关函数的一切都适用于方法， 就目前而言， 唯一重要的差别是调用方法的方式。
❸处的方法__init__() 是一个特殊的方法， 每当你根据Dog 类创建新实例时， Python都会自动运行它。
在这个方法的名称中， 开头和末尾各有两个下划线， 这是一种约定， 旨在避免Python默认方法与普通方法发生名称冲突。
我们将方法__init__() 定义成了包含三个形参： self 、 name 和age 。 在这个方法的定义中， 形参self 必不可少， 还必须位于其他形参的前面。
为何必须在方法定义中包含形参self 呢？ 因为Python调用这个__init__() 方法来创建Dog 实例时， 将自动传入实参self 。
每个与类相关联的方法调用都自动传递实参self ， 它是一个指向实例本身的引用， 让实例能够访问类中的属性和方法。
我们创建Dog 实例时， Python将调用Dog 类的方法__init__() 。 我们将通过实参向Dog() 传递名字和年龄； self 会自动传递，因此我们不需要传递它。
每当我们根据Dog 类创建实例时， 都只需给最后两个形参（name 和age ） 提供值。
❹处定义的两个变量都有前缀self 。 以self 为前缀的变量都可供类中的所有方法使用， 我们还可以通过类的任何实例来访问这些变量。
self.name = name 获取存储在形参name 中的值， 并将其存储到变量name 中， 然后该变量被关联到当前创建的实例。
self.age = age 的作用与此类似。 像这样可通过实例访问的变量称为属性 。
Dog 类还定义了另外两个方法： sit() 和roll_over() （见❺） 。
由于这些方法不需要额外的信息， 如名字或年龄， 因此它们只有一个形参self 。
我们后面将创建的实例能够访问这些方法， 换句话说， 它们都会蹲下和打滚。
当前， sit() 和roll_over() 所做的有限， 它们只是打印一条消息， 指出小狗正蹲下或打滚。
但可以扩展这些方法以模拟实际情况： 如果这个类包含在一个计算机游戏中， 这些方法将包含创建小狗蹲下和打滚动画效果的代码。
如果这个类是用于控制机器狗的， 这些方法将引导机器狗做出蹲下和打滚的动作
'''

class Dog():
    
    my_dog = Dog('willie', 6)  #①处
    print("My dog's name is " + my_dog.name.title() + ".") #②处
    print("My dog is " + str(my_dog.age) + " years old.") #③处
    
'''
这里使用的是前一个示例中编写的Dog 类。
在❶处， 我们让Python创建一条名字为'willie' 、 年龄为6 的小狗。
遇到这行代码时， Python使用实参'willie' 和6 调用Dog 类中的方法__init__() 。
方法__init__() 创建一个表示特定小狗的示例， 并使用我们提供的值来设置属性name 和age 。
方法__init__() 并未显式地包含return 语句，但Python自动返回一个表示这条小狗的实例。
我们将这个实例存储在变量my_dog 中。
在这里， 命名约定很有用： 我们通常可以认为首字母大写的名称（如Dog ） 指的是类， 而
小写的名称（如my_dog ） 指的是根据类创建的实例。
1. 访问属性
要访问实例的属性， 可使用句点表示法。
在❷处， 我们编写了如下代码来访问my_dog 的属性name 的值：my_dog.name句点表示法在Python中很常用，
这种语法演示了Python如何获悉属性的值。
在这里， Python先找到实例my_dog ， 再查找与这个实例相关联的属性name 。
在Dog 类中引用这个属性时， 使用的是self.name 。
在❸处， 我们使用同样的方法来获取属性age 的值。 在前面的第1条print 语句中，
my_dog.name.title() 将my_dog 的属性name 的值'willie' 改为首字母大写的；
在第2条print 语句中， str(my_dog.age) 将my_dog 的属性age 的值6 转换为字符串。
输出是有关my_dog 的摘要：
My dog's name is Willie.
My dog is 6 years old.
'''